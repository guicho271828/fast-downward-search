
abstract_task.h,275
#define ABSTRACT_TASK_H2,24
class AbstractTask 13,180
    virtual std::pair<AbstractTask::std::pair26,820
    virtual std::pair<AbstractTask::std::pair31,1139
    virtual std::pair<AbstractTask::std::pair33,1281
    virtual std::pair<AbstractTask::std::pair40,1577

additive_heuristic.h,449
#define ADDITIVE_HEURISTIC_H2,29
class AdditiveHeuristic 12,157
    static const int MAX_COST_VALUE AdditiveHeuristic::MAX_COST_VALUE20,608
    AdaptiveQueue<Proposition *> queue;AdditiveHeuristic::queue22,658
    bool did_write_overflow_warning;AdditiveHeuristic::did_write_overflow_warning23,698
    void enqueue_if_necessary(AdditiveHeuristic::enqueue_if_necessary30,939
    void increase_cost(AdditiveHeuristic::increase_cost40,1274

axioms.h,1401
#define AXIOMS_H2,17
class AxiomEvaluator 8,81
    struct AxiomLiteral AxiomEvaluator::AxiomLiteral10,126
        std::vector<AxiomRule *> condition_of;AxiomEvaluator::AxiomLiteral::condition_of11,152
    struct AxiomRule AxiomEvaluator::AxiomRule13,206
        int condition_count;AxiomEvaluator::AxiomRule::condition_count14,229
        int unsatisfied_conditions;AxiomEvaluator::AxiomRule::unsatisfied_conditions15,258
        int effect_var;AxiomEvaluator::AxiomRule::effect_var16,294
        int effect_val;AxiomEvaluator::AxiomRule::effect_val17,318
        AxiomLiteral *effect_literal;AxiomEvaluator::AxiomRule::effect_literal18,342
        AxiomRule(AxiomEvaluator::AxiomRule::AxiomRule19,380
    struct NegationByFailureInfo AxiomEvaluator::NegationByFailureInfo24,649
        int var_no;AxiomEvaluator::NegationByFailureInfo::var_no25,684
        AxiomLiteral *literal;AxiomEvaluator::NegationByFailureInfo::literal26,704
        NegationByFailureInfo(AxiomEvaluator::NegationByFailureInfo::NegationByFailureInfo27,735
    std::vector<std::vector<AxiomLiteral> > axiom_literals;AxiomEvaluator::axiom_literals31,844
    std::vector<AxiomRule> rules;AxiomEvaluator::rules32,904
    std::vector<std::vector<NegationByFailureInfo> > nbf_info_by_layer;AxiomEvaluator::nbf_info_by_layer33,938
    std::vector<AxiomLiteral *> queue;AxiomEvaluator::queue37,1133

blind_search_heuristic.h,144
#define BLIND_SEARCH_HEURISTIC_H2,33
class BlindSearchHeuristic 6,91
    int min_operator_cost;BlindSearchHeuristic::min_operator_cost7,139

causal_graph.h,826
#define CAUSAL_GRAPH_H2,23
typedef std::vector<std::vector<int> > IntRelation;55,2022
class CausalGraph 60,2113
    IntRelation pre_to_eff;CausalGraph::pre_to_eff61,2133
    IntRelation eff_to_pre;CausalGraph::eff_to_pre62,2161
    IntRelation eff_to_eff;CausalGraph::eff_to_eff63,2189
    IntRelation successors;CausalGraph::successors65,2218
    IntRelation predecessors;CausalGraph::predecessors66,2246
    const std::vector<int> &get_pre_to_eff(CausalGraph::get_pre_to_eff93,3219
    const std::vector<int> &get_eff_to_pre(CausalGraph::get_eff_to_pre97,3318
    const std::vector<int> &get_eff_to_eff(CausalGraph::get_eff_to_eff101,3417
    const std::vector<int> &get_successors(CausalGraph::get_successors105,3516
    const std::vector<int> &get_predecessors(CausalGraph::get_predecessors109,3615

cea_heuristic.h,580
#define CEA_HEURISTIC_H2,24
class ContextEnhancedAdditiveHeuristic 15,218
    std::vector<LocalProblem *> local_problems;ContextEnhancedAdditiveHeuristic::local_problems16,278
    std::vector<std::vector<LocalProblem *> > local_problem_index;ContextEnhancedAdditiveHeuristic::local_problem_index17,326
    LocalProblem *goal_problem;ContextEnhancedAdditiveHeuristic::goal_problem18,393
    LocalProblemNode *goal_node;ContextEnhancedAdditiveHeuristic::goal_node19,425
    AdaptiveQueue<LocalProblemNode *> node_queue;ContextEnhancedAdditiveHeuristic::node_queue21,459

cg_cache.h,664
#define CG_CACHE_H2,19
class CGCache 9,107
    std::vector<std::vector<int> > cache;CGCache::cache10,123
    std::vector<std::vector<ValueTransitionLabel *> > helpful_transition_cache;CGCache::helpful_transition_cache11,165
    std::vector<std::vector<int> > depends_on;CGCache::depends_on12,245
    static const int NOT_COMPUTED CGCache::NOT_COMPUTED18,511
    bool is_cached(CGCache::is_cached23,584
    int lookup(CGCache::lookup27,663
    void store(CGCache::store31,822
    ValueTransitionLabel *lookup_helpful_transition(CGCache::lookup_helpful_transition36,1000
    void store_helpful_transition(CGCache::store_helpful_transition42,1251

cg_heuristic.h,402
#define CG_HEURISTIC_H2,23
class CGHeuristic 15,218
    std::vector<AdaptiveQueue<ValueNode *> *> prio_queues;CGHeuristic::prio_queues16,257
    CGCache *cache;CGHeuristic::cache18,317
    int cache_hits;CGHeuristic::cache_hits19,337
    int cache_misses;CGHeuristic::cache_misses20,357
    int helpful_transition_extraction_counter;CGHeuristic::helpful_transition_extraction_counter22,380

combining_evaluator.h,250
#define COMBINING_EVALUATOR_H2,30
class CombiningEvaluator 15,281
    std::vector<ScalarEvaluator *> subevaluators;CombiningEvaluator::subevaluators16,333
    bool all_dead_ends_are_reliable;CombiningEvaluator::all_dead_ends_are_reliable17,383

cost_adapted_task.h,197
#define COST_ADAPTED_TASK_H2,28
class CostAdaptedTask 21,532
    const OperatorCost cost_type;CostAdaptedTask::cost_type22,580
    const bool is_unit_cost;CostAdaptedTask::is_unit_cost23,614

countdown_timer.h,156
#define COUNTDOWN_TIMER_H2,26
class CountdownTimer 8,93
    Timer timer;CountdownTimer::timer9,116
    double max_time;CountdownTimer::max_time10,133

delegating_task.h,366
#define DELEGATING_TASK_H2,26
class DelegatingTask 17,384
    const std::shared_ptr<AbstractTask> parent;DelegatingTask::parent19,440
    virtual std::pair<DelegatingTask::std::pair33,1202
    virtual std::pair<DelegatingTask::std::pair38,1536
    virtual std::pair<DelegatingTask::std::pair40,1683
    virtual std::pair<DelegatingTask::std::pair47,1999

domain_transition_graph.h,2005
#define DOMAIN_TRANSITION_GRAPH_H2,34
using namespace std;8,141
struct LocalAssignment 24,506
    short local_var;LocalAssignment::local_var25,531
    short value;LocalAssignment::value26,552
    LocalAssignment(LocalAssignment::LocalAssignment28,570
struct ValueTransitionLabel 36,748
    GlobalOperator *op;ValueTransitionLabel::op37,778
    vector<LocalAssignment> precond;ValueTransitionLabel::precond38,802
    vector<LocalAssignment> effect;ValueTransitionLabel::effect39,839
    ValueTransitionLabel(ValueTransitionLabel::ValueTransitionLabel41,876
struct ValueTransition 47,1116
    ValueNode *target;ValueTransition::target48,1141
    vector<ValueTransitionLabel> labels;ValueTransition::labels49,1164
    vector<ValueTransitionLabel> cea_labels;ValueTransition::cea_labels50,1205
    ValueTransition(ValueTransition::ValueTransition52,1279
struct ValueNode 61,1467
    DomainTransitionGraph *parent_graph;ValueNode::parent_graph62,1486
    int value;ValueNode::value63,1527
    vector<ValueTransition> transitions;ValueNode::transitions64,1542
    vector<int> distances;ValueNode::distances66,1584
    vector<ValueTransitionLabel *> helpful_transitions;ValueNode::helpful_transitions67,1664
    vector<int> children_state;ValueNode::children_state69,1761
    ValueNode *reached_from;ValueNode::reached_from70,1806
    ValueTransitionLabel *reached_by;ValueNode::reached_by71,1851
    ValueNode(ValueNode::ValueNode73,1897
namespace cea_heuristic 78,2056
class DomainTransitionGraph 82,2125
    int var;DomainTransitionGraph::var89,2351
    bool is_axiom;DomainTransitionGraph::is_axiom90,2364
    vector<ValueNode> nodes;DomainTransitionGraph::nodes91,2383
    int last_helpful_transition_extraction_time;DomainTransitionGraph::last_helpful_transition_extraction_time93,2413
    vector<int> local_to_global_child;DomainTransitionGraph::local_to_global_child95,2492
    vector<int> cea_parents;DomainTransitionGraph::cea_parents98,2671

eager_search.h,575
#define EAGER_SEARCH_H2,23
class EagerSearch 15,207
    const bool reopen_closed_nodes;EagerSearch::reopen_closed_nodes16,249
    const bool use_multi_path_dependence;EagerSearch::use_multi_path_dependence17,285
    OpenList<StateID> *open_list;EagerSearch::open_list19,328
    ScalarEvaluator *f_evaluator;EagerSearch::f_evaluator20,362
    std::vector<Heuristic *> heuristics;EagerSearch::heuristics22,397
    std::vector<Heuristic *> preferred_operator_heuristics;EagerSearch::preferred_operator_heuristics23,438
    std::pair<EagerSearch::std::pair25,499

enforced_hill_climbing_search.h,1413
#define ENFORCED_HILL_CLIMBING_SEARCH_H2,40
typedef std::pair<StateID,StateID17,278
typedef std::pair<StateID, std::pair<int, const GlobalOperator * > > OpenListEntryEHC;17,278
enum class PreferredUsage 19,366
    PRUNE_BY_PREFERRED,PreferredUsage::PRUNE_BY_PREFERRED20,394
    RANK_PREFERRED_FIRSTPreferredUsage::RANK_PREFERRED_FIRST21,418
class EnforcedHillClimbingSearch 31,689
    OpenList<OpenListEntryEHC> *open_list;EnforcedHillClimbingSearch::open_list40,1044
    GEvaluator *g_evaluator;EnforcedHillClimbingSearch::g_evaluator41,1087
    Heuristic *heuristic;EnforcedHillClimbingSearch::heuristic43,1117
    std::vector<Heuristic *> preferred_operator_heuristics;EnforcedHillClimbingSearch::preferred_operator_heuristics44,1143
    std::set<Heuristic *> heuristics;EnforcedHillClimbingSearch::heuristics45,1203
    bool use_preferred;EnforcedHillClimbingSearch::use_preferred46,1241
    PreferredUsage preferred_usage;EnforcedHillClimbingSearch::preferred_usage47,1265
    EvaluationContext current_eval_context;EnforcedHillClimbingSearch::current_eval_context49,1302
    std::map<EnforcedHillClimbingSearch::std::map52,1365
    std::map<int, std::pair<int, int> > d_counts;EnforcedHillClimbingSearch::d_counts52,1365
    int num_ehc_phases;EnforcedHillClimbingSearch::num_ehc_phases53,1415
    int last_num_expanded;EnforcedHillClimbingSearch::last_num_expanded54,1439

equivalence_relation.h,1736
#define EQUIVALENCE_RELATION_H2,31
typedef std::list<int>::iterator ElementListIter;11,174
typedef std::list<int>::const_iterator ElementListConstIter;12,224
typedef std::list<Block>::iterator BlockListIter;13,285
typedef std::list<Block>::const_iterator BlockListConstIter;14,335
struct DoubleEpsilonEquality 17,424
    bool operator()(DoubleEpsilonEquality::operator()18,455
class Block 25,680
    std::list<int> elements;Block::elements26,694
    BlockListIter it_intersection_block;Block::it_intersection_block35,1146
    ElementListIter begin(Block::begin40,1296
    ElementListIter end(Block::end41,1352
    ElementListConstIter begin(Block::begin42,1404
    ElementListConstIter end(Block::end43,1471
class EquivalenceRelation 46,1538
    int num_elements;EquivalenceRelation::num_elements47,1566
    std::list<Block> blocks;EquivalenceRelation::blocks48,1588
    typedef std::pair<BlockListIter,EquivalenceRelation::BlockListIter55,1918
    typedef std::pair<BlockListIter, ElementListIter> ElementPosition;EquivalenceRelation::ElementPosition55,1918
    typedef std::unordered_map<int,EquivalenceRelation::int56,1989
    typedef std::unordered_map<int, ElementPosition> ElementPositionMap;EquivalenceRelation::ElementPositionMap56,1989
    ElementPositionMap element_positions;EquivalenceRelation::element_positions57,2062
    BlockListConstIter begin(EquivalenceRelation::begin80,2936
    BlockListConstIter end(EquivalenceRelation::end81,2999
EquivalenceRelation *EquivalenceRelation::from_annotated_elements(EquivalenceRelation::from_annotated_elements124,5013
EquivalenceRelation *EquivalenceRelation::from_annotated_elements(EquivalenceRelation::from_annotated_elements130,5343

evaluation_context.h,372
#define EVALUATION_CONTEXT_H2,29
class EvaluationContext 49,1666
    HeuristicCache cache;EvaluationContext::cache50,1692
    int g_value;EvaluationContext::g_value51,1718
    bool preferred;EvaluationContext::preferred52,1735
    SearchStatistics *statistics;EvaluationContext::statistics53,1755
    static const int INVALID EvaluationContext::INVALID55,1790

evaluation_result.h,359
#define EVALUATION_RESULT_H2,28
class EvaluationResult 9,117
    static const int UNINITIALIZED EvaluationResult::UNINITIALIZED10,142
    int h_value;EvaluationResult::h_value12,184
    std::vector<const GlobalOperator *> preferred_operators;EvaluationResult::preferred_operators13,201
    static const int INFINITE;EvaluationResult::INFINITE15,270

exact_timer.h,343
#define EXACT_TIMER_H2,22
class ExactTimer 12,159
    double last_start_clock;ExactTimer::last_start_clock13,178
    double collected_time;ExactTimer::collected_time14,207
    bool stopped;ExactTimer::stopped15,234
    LARGE_INTEGER frequency;ExactTimer::frequency17,284
    LARGE_INTEGER start_ticks;ExactTimer::start_ticks18,313

ff_heuristic.h,192
#define FF_HEURISTIC_H2,23
class FFHeuristic 18,474
    typedef std::vector<bool> RelaxedPlan;FFHeuristic::RelaxedPlan21,616
    RelaxedPlan relaxed_plan;FFHeuristic::relaxed_plan22,659

g_evaluator.h,135
#define G_EVALUATOR_H2,22
class GEvaluator 8,94
    virtual void get_involved_heuristics(GEvaluator::get_involved_heuristics16,318

global_operator.h,1401
#define GLOBAL_OPERATOR_H2,26
struct GlobalCondition 10,137
    int var;11,162
    int val;12,175
    explicit GlobalCondition(13,188
    GlobalCondition(14,236
    bool is_applicable(16,283
    bool operator=20,381
    void dump(28,598
struct GlobalEffect 31,625
    int var;32,647
    int val;33,660
    std::vector<GlobalCondition> conditions;GlobalEffect::conditions34,673
    bool does_fire(GlobalEffect::does_fire38,850
class GlobalOperator 48,1096
    bool is_an_axiom;GlobalOperator::is_an_axiom49,1119
    std::vector<GlobalCondition> preconditions;GlobalOperator::preconditions50,1141
    std::vector<GlobalEffect> effects;GlobalOperator::effects51,1189
    std::string name;GlobalOperator::name52,1228
    int cost;GlobalOperator::cost53,1250
    mutable bool marked;GlobalOperator::marked55,1265
    const std::string &get_name(GlobalOperator::get_name60,1479
    bool is_axiom(GlobalOperator::is_axiom62,1536
    const std::vector<GlobalCondition> &get_preconditions(GlobalOperator::get_preconditions64,1586
    const std::vector<GlobalEffect> &get_effects(GlobalOperator::get_effects65,1677
    bool is_applicable(GlobalOperator::is_applicable67,1754
    bool is_marked(GlobalOperator::is_marked74,1983
    void mark(GlobalOperator::mark77,2041
    void unmark(GlobalOperator::unmark80,2094
    int get_cost(GlobalOperator::get_cost84,2151

global_state.h,467
#define GLOBAL_STATE_H2,23
typedef IntPacker::Bin PackedStateBin;14,196
class GlobalState 18,357
    const PackedStateBin *buffer;GlobalState::buffer23,554
    const StateRegistry *registry;GlobalState::registry25,659
    StateID id;GlobalState::id26,694
    const PackedStateBin *get_packed_buffer(GlobalState::get_packed_buffer31,860
    const StateRegistry &get_registry(GlobalState::get_registry35,944
    StateID get_id(GlobalState::get_id44,1130

globals.h,23
#define GLOBALS_H2,18

goal_count_heuristic.h,67
#define GOAL_COUNT_HEURISTIC_H2,31
class GoalCountHeuristic 6,87

heuristic.h,699
#define HEURISTIC_H2,20
class Heuristic 17,254
    std::string description;Heuristic::description18,297
    bool initialized;Heuristic::initialized19,326
    std::vector<const GlobalOperator *> preferred_operators;Heuristic::preferred_operators32,880
    const std::shared_ptr<AbstractTask> task;Heuristic::task35,1040
    TaskProxy task_proxy;Heuristic::task_proxy37,1136
    OperatorCost cost_type;Heuristic::cost_type38,1162
    enum {DEAD_END Heuristic::DEAD_END39,1190
    virtual void initialize(Heuristic::initialize40,1216
    virtual void get_involved_heuristics(Heuristic::get_involved_heuristics62,2213
    OperatorCost get_cost_type(Heuristic::get_cost_type66,2328

heuristic_cache.h,299
#define HEURISTIC_CACHE_H2,26
using EvaluationResults 12,184
class HeuristicCache 17,329
    EvaluationResults eval_results;HeuristicCache::eval_results18,352
    GlobalState state;HeuristicCache::state19,388
    void for_each_heuristic_value(HeuristicCache::for_each_heuristic_value30,639

hm_heuristic.h,304
#define HM_HEURISTIC_H2,23
typedef std::vector<std::pair<int, int> > Tuple;16,241
class HMHeuristic 27,461
    int m;HMHeuristic::m29,518
    std::map<HMHeuristic::std::map32,547
    std::map<Tuple, int> hm_table;HMHeuristic::hm_table32,547
    bool was_updated;HMHeuristic::was_updated33,582

int_packer.h,350
#define INT_PACKER_H2,21
class IntPacker 21,680
    std::vector<VariableInfo> var_infos;IntPacker::var_infos24,723
    int num_bins;IntPacker::num_bins25,764
    typedef unsigned int Bin;IntPacker::Bin31,964
    int get_num_bins(IntPacker::get_num_bins45,1465
    std::size_t get_bin_size_in_bytes(IntPacker::get_bin_size_in_bytes46,1514

ipc_max_heuristic.h,139
#define IPC_MAX_HEURISTIC_H2,28
class IPCMaxHeuristic 10,116
    std::vector<Heuristic *> heuristics;IPCMaxHeuristic::heuristics11,159

iterated_search.h,822
#define ITERATED_SEARCH_H2,26
class IteratedSearch 9,129
    const std::vector<ParseTree> engine_configs;IteratedSearch::engine_configs10,174
    bool pass_bound;IteratedSearch::pass_bound11,223
    bool repeat_last_phase;IteratedSearch::repeat_last_phase12,244
    bool continue_on_fail;IteratedSearch::continue_on_fail13,272
    bool continue_on_solve;IteratedSearch::continue_on_solve14,299
    int phase;IteratedSearch::phase16,328
    bool last_phase_found_solution;IteratedSearch::last_phase_found_solution17,343
    int best_bound;IteratedSearch::best_bound18,379
    bool iterated_found_solution;IteratedSearch::iterated_found_solution19,399
    SearchEngine *current_search;IteratedSearch::current_search21,434
    std::string current_search_name;IteratedSearch::current_search_name22,468

lazy_search.h,1148
#define LAZY_SEARCH_H2,22
typedef std::pair<StateID,StateID19,325
typedef std::pair<StateID, const GlobalOperator *> OpenListEntryLazy;19,325
class LazySearch 21,396
    OpenList<OpenListEntryLazy> *open_list;LazySearch::open_list23,448
    bool reopen_closed_nodes;LazySearch::reopen_closed_nodes26,527
    bool randomize_successors;LazySearch::randomize_successors27,618
    bool preferred_successors_first;LazySearch::preferred_successors_first28,649
    std::vector<Heuristic *> heuristics;LazySearch::heuristics30,687
    std::vector<Heuristic *> preferred_operator_heuristics;LazySearch::preferred_operator_heuristics31,728
    std::vector<Heuristic *> estimate_heuristics;LazySearch::estimate_heuristics32,788
    GlobalState current_state;LazySearch::current_state34,839
    StateID current_predecessor_id;LazySearch::current_predecessor_id35,870
    const GlobalOperator *current_operator;LazySearch::current_operator36,906
    int current_g;LazySearch::current_g37,950
    int current_real_g;LazySearch::current_real_g38,969
    EvaluationContext current_eval_context;LazySearch::current_eval_context39,993

lm_cut_heuristic.h,2085
#define LM_CUT_HEURISTIC_H2,27
enum PropositionStatus 40,1110
    UNREACHED PropositionStatus::UNREACHED41,1135
    REACHED PropositionStatus::REACHED42,1154
    GOAL_ZONE PropositionStatus::GOAL_ZONE43,1171
    BEFORE_GOAL_ZONE PropositionStatus::BEFORE_GOAL_ZONE44,1190
const int COST_MULTIPLIER 47,1219
struct RelaxedOperator 59,1726
    int original_op_id;RelaxedOperator::original_op_id60,1751
    std::vector<RelaxedProposition *> preconditions;RelaxedOperator::preconditions61,1775
    std::vector<RelaxedProposition *> effects;RelaxedOperator::effects62,1828
    int base_cost;RelaxedOperator::base_cost63,1875
    int cost;RelaxedOperator::cost65,1936
    int unsatisfied_preconditions;RelaxedOperator::unsatisfied_preconditions66,1950
    int h_max_supporter_cost;RelaxedOperator::h_max_supporter_cost67,1985
    RelaxedProposition *h_max_supporter;RelaxedOperator::h_max_supporter68,2048
    RelaxedOperator(RelaxedOperator::RelaxedOperator69,2089
struct RelaxedProposition 78,2392
    std::vector<RelaxedOperator *> precondition_of;RelaxedProposition::precondition_of79,2420
    std::vector<RelaxedOperator *> effect_of;RelaxedProposition::effect_of80,2472
    PropositionStatus status;RelaxedProposition::status82,2519
    int h_max_cost;RelaxedProposition::h_max_cost83,2549
class LandmarkCutHeuristic 103,3647
    std::vector<RelaxedOperator> relaxed_operators;LandmarkCutHeuristic::relaxed_operators104,3695
    std::vector<std::vector<RelaxedProposition> > propositions;LandmarkCutHeuristic::propositions105,3747
    RelaxedProposition artificial_precondition;LandmarkCutHeuristic::artificial_precondition106,3811
    RelaxedProposition artificial_goal;LandmarkCutHeuristic::artificial_goal107,3859
    int num_propositions;LandmarkCutHeuristic::num_propositions108,3899
    AdaptiveQueue<RelaxedProposition *> priority_queue;LandmarkCutHeuristic::priority_queue109,3925
    void enqueue_if_necessary(LandmarkCutHeuristic::enqueue_if_necessary125,4788
inline void RelaxedOperator::update_h_max_supporter(141,5272

lp_internals.h,28
#define LP_INTERNALS_H2,23

lp_solver.h,2082
#define LP_SOLVER_H2,20
#define LP_METHOD(16,313
#define LP_METHOD(18,343
enum class LPSolverType 25,620
    CLP,26,646
    CLP, CPLEX,26,646
    CLP, CPLEX, GUROBI26,646
enum class LPObjectiveSense 29,673
    MAXIMIZE,30,703
    MAXIMIZE, MINIMIZE30,703
class LPConstraint 39,865
    std::vector<int> variables;LPConstraint::variables40,886
    std::vector<double> coefficients;LPConstraint::coefficients41,918
    double lower_bound;LPConstraint::lower_bound42,956
    double upper_bound;LPConstraint::upper_bound43,980
    const std::vector<int> &get_variables(LPConstraint::get_variables48,1094
    const std::vector<double> &get_coefficients(LPConstraint::get_coefficients49,1165
    double get_lower_bound(LPConstraint::get_lower_bound51,1246
    void set_lower_bound(LPConstraint::set_lower_bound52,1304
    double get_upper_bound(LPConstraint::get_upper_bound53,1361
    void set_upper_bound(LPConstraint::set_upper_bound54,1419
struct LPVariable 62,1650
    double lower_bound;LPVariable::lower_bound63,1670
    double upper_bound;LPVariable::upper_bound64,1694
    double objective_coefficient;LPVariable::objective_coefficient65,1718
class LPSolver 77,1998
    bool is_initialized;LPSolver::is_initialized78,2015
    bool is_solved;LPSolver::is_solved79,2040
    int num_permanent_constraints;LPSolver::num_permanent_constraints80,2060
    bool has_temporary_constraints;LPSolver::has_temporary_constraints81,2095
    std::unique_ptr<OsiSolverInterface> lp_solver;LPSolver::lp_solver83,2145
    std::vector<double> elements;LPSolver::elements90,2347
    std::vector<int> indices;LPSolver::indices91,2381
    std::vector<int> starts;LPSolver::starts92,2411
    std::vector<double> col_lb;LPSolver::col_lb93,2440
    std::vector<double> col_ub;LPSolver::col_ub94,2472
    std::vector<double> objective;LPSolver::objective95,2504
    std::vector<double> row_lb;LPSolver::row_lb96,2539
    std::vector<double> row_ub;LPSolver::row_ub97,2571
    std::vector<CoinPackedVectorBase *> rows;LPSolver::rows98,2603

max_evaluator.h,55
#define MAX_EVALUATOR_H2,24
class MaxEvaluator 8,102

max_heuristic.h,203
#define MAX_HEURISTIC_H2,24
class HSPMaxHeuristic 8,131
    AdaptiveQueue<Proposition *> queue;HSPMaxHeuristic::queue9,184
    void enqueue_if_necessary(HSPMaxHeuristic::enqueue_if_necessary15,360

operator_cost.h,350
#define OPERATOR_COST_H2,24
enum OperatorCost 7,92
enum OperatorCost {NORMAL OperatorCost::NORMAL7,92
enum OperatorCost {NORMAL = 0, ONE OperatorCost::ONE7,92
enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE OperatorCost::PLUSONE7,92
enum OperatorCost {NORMAL = 0, ONE = 1, PLUSONE = 2, MAX_OPERATOR_COST}OperatorCost::MAX_OPERATOR_COST7,92

option_parser.h,2433
#define OPTION_PARSER_H2,24
class TokenParser 57,1547
class TokenParser<TokenParser67,1783
class TokenParser<TokenParser74,1932
class TokenParser<TokenParser81,2045
class TokenParser<TokenParser87,2168
class TokenParser<TokenParser93,2278
class TokenParser<TokenParser99,2396
class TokenParser<TokenParser105,2518
class TokenParser<TokenParser111,2634
class TokenParser<TokenParser118,2741
class TokenParser<TokenParser124,2848
class TokenParser<TokenParser130,2966
class TokenParser<TokenParser136,3086
class TokenParser<TokenParser142,3190
class TokenParser<TokenParser148,3345
class OptionParser 159,3613
    static std::string to_str(OptionParser::to_str220,6255
    std::string unparsed_config;OptionParser::unparsed_config227,6404
    Options opts;OptionParser::opts228,6437
    const ParseTree parse_tree;OptionParser::parse_tree229,6455
    bool dry_run_;OptionParser::dry_run_230,6487
    bool help_mode_;OptionParser::help_mode_231,6506
    ParseTree::sibling_iterator next_unparsed_argument;OptionParser::next_unparsed_argument233,6528
    std::vector<std::string> valid_keys;OptionParser::valid_keys234,6584
T OptionParser::start_parsing(242,6733
void OptionParser::add_option(251,7001
void OptionParser::add_list_option(311,9160
T TokenParser<T>::parse(parse318,9389
int TokenParser<int>::parse(parse328,9716
double TokenParser<double>::parse(parse342,10135
static T *lookup_in_registry(lookup_in_registry358,10648
static std::shared_ptr<T> lookup_in_registry_shared(369,11091
static T *lookup_in_predefinitions(lookup_in_predefinitions379,11500
OpenList<Entry > *TokenParser<OpenList<Entry > *>::parse(parse390,11840
Heuristic *TokenParser<Heuristic *>::parse(parse395,11973
LandmarkGraph *TokenParser<LandmarkGraph *>::parse(parse403,12223
ScalarEvaluator *TokenParser<ScalarEvaluator *>::parse(parse412,12572
SearchEngine *TokenParser<SearchEngine *>::parse(parse428,13300
MergeStrategy *TokenParser<MergeStrategy *>::parse(parse432,13419
ShrinkStrategy *TokenParser<ShrinkStrategy *>::parse(parse436,13541
Labels *TokenParser<Labels *>::parse(parse440,13666
Synergy *TokenParser<Synergy *>::parse(parse445,13768
std::shared_ptr<AbstractTask> TokenParser<std::shared_ptr<AbstractTask> >::parse(parse449,13872
ParseTree TokenParser<ParseTree>::parse(parse453,14030
std::vector<T > TokenParser<std::vector<T > >::parse(parse458,14143

option_parser_util.h,7188
#define OPTION_PARSER_UTIL_H2,29
struct ParseNode 32,530
    ParseNode(ParseNode::ParseNode33,549
    ParseNode(ParseNode::ParseNode38,613
    std::string value;ParseNode::value42,711
    std::string key;ParseNode::key43,734
    friend std::ostream &operator<<(ParseNode::operator<<45,756
typedef tree<ParseNode> ParseTree;53,962
struct ArgError 55,998
    std::string msg;ArgError::msg58,1048
    friend std::ostream &operator<<(ArgError::operator<<60,1070
struct ParseError 65,1211
    std::string msg;ParseError::msg69,1353
    ParseTree parse_tree;ParseError::parse_tree70,1374
    std::string substr;ParseError::substr71,1400
    friend std::ostream &operator<<(ParseError::operator<<73,1425
class Registry 87,1893
    typedef T (*Factory)Registry::Factory89,1918
    static Registry<T> *instance(Registry::instance90,1960
    void register_object(Registry::register_object95,2069
    bool contains(Registry::contains100,2234
    Factory get(Registry::get104,2338
    std::vector<std::string> get_keys(Registry::get_keys108,2415
    std::map<Registry::std::map118,2644
    std::map<std::string, Factory> registered;Registry::registered118,2644
class Predefinitions 126,2808
    static Predefinitions<T> *instance(Predefinitions::instance128,2839
    void predefine(Predefinitions::predefine133,2960
    bool contains(Predefinitions::contains138,3100
    T get(Predefinitions::get142,3204
    std::map<Predefinitions::std::map148,3319
    std::map<std::string, T> predefined;Predefinitions::predefined148,3319
class Synergy 152,3365
    std::vector<Heuristic *> heuristics;Synergy::heuristics154,3389
struct TypeNamer 161,3593
    static std::string name(TypeNamer::name162,3612
struct TypeNamer<TypeNamer168,3701
    static std::string name(TypeNamer::name169,3725
struct TypeNamer<TypeNamer175,3801
    static std::string name(TypeNamer::name176,3826
struct TypeNamer<TypeNamer182,3903
    static std::string name(TypeNamer::name183,3930
struct TypeNamer<TypeNamer189,4009
    static std::string name(TypeNamer::name190,4041
struct TypeNamer<TypeNamer196,4120
    static std::string name(TypeNamer::name197,4152
struct TypeNamer<TypeNamer203,4234
    static std::string name(TypeNamer::name204,4270
struct TypeNamer<TypeNamer210,4356
    static std::string name(TypeNamer::name211,4394
struct TypeNamer<TypeNamer217,4482
    static std::string name(TypeNamer::name218,4517
struct TypeNamer<TypeNamer224,4602
    static std::string name(TypeNamer::name225,4632
struct TypeNamer<TypeNamer231,4813
    static std::string name(TypeNamer::name232,4843
struct TypeNamer<TypeNamer238,4923
    static std::string name(TypeNamer::name239,4959
struct TypeNamer<TypeNamer245,5045
    static std::string name(TypeNamer::name246,5082
struct TypeNamer<TypeNamer252,5169
    static std::string name(TypeNamer::name253,5198
struct TypeNamer<TypeNamer259,5277
    static std::string name(TypeNamer::name260,5328
struct TypeNamer<TypeNamer266,5424
    static std::string name(TypeNamer::name267,5462
struct TypeNamer<TypeNamer273,5550
    static std::string name(TypeNamer::name274,5586
struct TypeDocumenter 283,5834
    static std::string synopsis(TypeDocumenter::synopsis284,5858
struct TypeDocumenter<TypeDocumenter290,5935
    static std::string synopsis(TypeDocumenter::synopsis291,5972
struct TypeDocumenter<TypeDocumenter308,6882
    static std::string synopsis(TypeDocumenter::synopsis309,6923
struct TypeDocumenter<TypeDocumenter319,7404
    static std::string synopsis(TypeDocumenter::synopsis320,7447
typename tree<T>::sibling_iterator last_child(329,7674
typename tree<T>::sibling_iterator last_child_of_root(335,7831
typename tree<T>::sibling_iterator first_child(340,7966
typename tree<T>::sibling_iterator first_child_of_root(346,8124
typename tree<T>::sibling_iterator end_of_roots_children(351,8261
tree<T> subtree(356,8391
class Options 365,8636
    Options(Options::Options367,8660
    void set_help_mode(Options::set_help_mode372,8762
    std::map<Options::std::map376,8827
    std::map<std::string, boost::any> storage;Options::storage376,8827
    void set(Options::set379,8898
    T get(Options::get384,8999
    T get(Options::get406,9911
    void verify_list_non_empty(Options::verify_list_non_empty414,10111
    std::vector<T> get_list(Options::get_list428,10592
    int get_enum(Options::get_enum432,10694
    bool contains(Options::contains436,10773
    std::string get_unparsed_config(Options::get_unparsed_config440,10874
    void set_unparsed_config(Options::set_unparsed_config444,10959
    std::string unparsed_config;Options::unparsed_config448,11066
    bool help_mode;Options::help_mode449,11099
struct OptionFlags 453,11192
    explicit OptionFlags(OptionFlags::OptionFlags454,11213
    bool mandatory;OptionFlags::mandatory457,11290
typedef std::vector<std::pair<std::string, std::string> > ValueExplanations;460,11314
struct ArgumentInfo 461,11391
    ArgumentInfo(ArgumentInfo::ArgumentInfo462,11413
    std::string kwd;ArgumentInfo::kwd472,11725
    std::string help;ArgumentInfo::help473,11746
    std::string type_name;ArgumentInfo::type_name474,11768
    std::string default_value;ArgumentInfo::default_value475,11795
    bool mandatory;ArgumentInfo::mandatory476,11826
    std::vector<ArgumentInfo::std::vector477,11846
    std::vector<std::pair<std::string, std::string> > value_explanations;ArgumentInfo::value_explanations477,11846
struct PropertyInfo 480,11924
    PropertyInfo(PropertyInfo::PropertyInfo481,11946
    std::string property;PropertyInfo::property485,12063
    std::string description;PropertyInfo::description486,12089
struct NoteInfo 489,12122
    NoteInfo(NoteInfo::NoteInfo490,12140
    std::string name;NoteInfo::name495,12293
    std::string description;NoteInfo::description496,12315
    bool long_text;NoteInfo::long_text497,12344
struct LanguageSupportInfo 501,12369
    LanguageSupportInfo(LanguageSupportInfo::LanguageSupportInfo502,12398
    std::string feature;LanguageSupportInfo::feature506,12521
    std::string description;LanguageSupportInfo::description507,12546
struct DocStruct 511,12658
    std::string type;DocStruct::type512,12677
    std::string full_name;DocStruct::full_name513,12699
    std::string synopsis;DocStruct::synopsis514,12726
    std::vector<ArgumentInfo> arg_help;DocStruct::arg_help515,12752
    std::vector<PropertyInfo> property_help;DocStruct::property_help516,12792
    std::vector<LanguageSupportInfo> support_help;DocStruct::support_help517,12837
    std::vector<NoteInfo> notes;DocStruct::notes518,12888
    bool hidden;DocStruct::hidden519,12921
class DocStore 523,12995
    static DocStore *instance(DocStore::instance525,13020
    std::map<DocStore::std::map559,14290
    std::map<std::string, DocStruct> registered;DocStore::registered559,14290
class DocPrinter 562,14343
    std::ostream &os;DocPrinter::os571,14612
class Txt2TagsPrinter 582,15144
class PlainPrinter 597,15757
    bool print_all;PlainPrinter::print_all611,16390

per_state_information.h,2579
#define PER_STATE_INFORMATION_H2,32
class PerStateInformationBase 15,281
    PerStateInformationBase(PerStateInformationBase::PerStateInformationBase19,422
    virtual ~PerStateInformationBase(PerStateInformationBase::~PerStateInformationBase21,460
class PerStateInformation 51,1903
    const Entry default_value;PerStateInformation::default_value52,1964
    typedef std::unordered_map<const StateRegistry PerStateInformation::StateRegistry53,1995
                               SegmentedVector<Entry> * > EntryVectorMap;PerStateInformation::EntryVectorMap54,2049
    EntryVectorMap entries_by_registry;PerStateInformation::entries_by_registry55,2123
    mutable const StateRegistry *cached_registry;PerStateInformation::cached_registry57,2164
    mutable SegmentedVector<Entry> *cached_entries;PerStateInformation::cached_entries58,2214
    SegmentedVector<Entry> *get_entries(PerStateInformation::get_entries66,2557
    const SegmentedVector<Entry> *get_entries(PerStateInformation::get_entries88,3538
    class const_iterator PerStateInformation::const_iterator108,4459
        const PerStateInformation<Entry> &owner;PerStateInformation::const_iterator::owner111,4642
        const StateRegistry *registry;PerStateInformation::const_iterator::registry112,4691
        StateID pos;PerStateInformation::const_iterator::pos113,4730
        const_iterator(PerStateInformation::const_iterator::const_iterator115,4752
        const_iterator(PerStateInformation::const_iterator::const_iterator119,4958
        ~const_iterator(PerStateInformation::const_iterator::~const_iterator122,5089
        const_iterator &operator++(PerStateInformation::const_iterator::operator++124,5119
        const_iterator operator++(PerStateInformation::const_iterator::operator++129,5220
        bool operator==(PerStateInformation::const_iterator::operator==135,5361
        bool operator!=(PerStateInformation::const_iterator::operator!=139,5512
        StateID operator*(PerStateInformation::const_iterator::operator*143,5612
        StateID *operator->(PerStateInformation::const_iterator::operator->147,5677
    const_iterator begin(PerStateInformation::begin152,5752
    const_iterator end(PerStateInformation::end155,5873
    PerStateInformation(PerStateInformation::PerStateInformation159,6008
    explicit PerStateInformation(PerStateInformation::PerStateInformation165,6128
    ~PerStateInformation(PerStateInformation::~PerStateInformation171,6298
    void remove_state_registry(PerStateInformation::remove_state_registry206,7563

plugin.h,258
#define PLUGIN_H2,17
class Plugin 17,369
    Plugin(Plugin::Plugin19,392
class PluginShared 29,724
    PluginShared(PluginShared::PluginShared31,753
class Plugin<Plugin39,1056
    static void register_open_lists(Plugin::register_open_lists44,1165

pref_evaluator.h,146
#define PREF_EVALUATOR_H2,25
class PrefEvaluator 10,120
    virtual void get_involved_heuristics(PrefEvaluator::get_involved_heuristics17,332

priority_queue.h,2989
#define PRIORITY_QUEUE_H2,25
class AbstractQueue 31,990
    typedef std::pair<int,AbstractQueue::int33,1020
    typedef std::pair<int, Value> Entry;AbstractQueue::Entry33,1020
    AbstractQueue(AbstractQueue::AbstractQueue35,1062
    virtual ~AbstractQueue(AbstractQueue::~AbstractQueue36,1085
    virtual AbstractQueue<Value> *convert_if_necessary(AbstractQueue::convert_if_necessary43,1270
class HeapQueue 70,2315
    typedef typename AbstractQueue<Value>::Entry Entry;HeapQueue::Entry71,2363
    struct compare_func HeapQueue::compare_func73,2420
        bool operator()(HeapQueue::compare_func::operator()74,2446
    class HeapHeapQueue::Heap79,2574
    Heap heap;HeapQueue::heap86,2831
    HeapQueue(HeapQueue::HeapQueue88,2854
    virtual ~HeapQueue(HeapQueue::~HeapQueue91,2879
    virtual void push(HeapQueue::push94,2913
    virtual Entry pop(HeapQueue::pop98,3020
    virtual bool empty(HeapQueue::empty105,3162
    virtual void clear(HeapQueue::clear109,3231
    static HeapQueue<Value> *create_from_sorted_entries_destructively(HeapQueue::create_from_sorted_entries_destructively113,3289
    virtual void add_virtual_pushes(HeapQueue::add_virtual_pushes123,3722
class BucketQueue 129,3822
    static const int MIN_BUCKETS_BEFORE_SWITCH BucketQueue::MIN_BUCKETS_BEFORE_SWITCH130,3872
    typedef typename AbstractQueue<Value>::Entry Entry;BucketQueue::Entry132,3927
    typedef std::vector<Value> Bucket;BucketQueue::Bucket134,3984
    std::vector<Bucket> buckets;BucketQueue::buckets135,4023
    mutable int current_bucket_no;BucketQueue::current_bucket_no136,4056
    int num_entries;BucketQueue::num_entries137,4091
    int num_pushes;BucketQueue::num_pushes138,4112
    void update_current_bucket_no(BucketQueue::update_current_bucket_no140,4133
    void extract_sorted_entries(BucketQueue::extract_sorted_entries147,4360
    BucketQueue(BucketQueue::BucketQueue163,5026
    virtual ~BucketQueue(BucketQueue::~BucketQueue166,5107
    virtual void push(BucketQueue::push169,5143
    virtual Entry pop(BucketQueue::pop181,5536
    virtual bool empty(BucketQueue::empty191,5871
    virtual void clear(BucketQueue::clear195,5944
    virtual AbstractQueue<Value> *convert_if_necessary(BucketQueue::convert_if_necessary208,6354
    virtual void add_virtual_pushes(BucketQueue::add_virtual_pushes221,6911
class AdaptiveQueue 228,7047
    AbstractQueue<Value> *wrapped_queue;AdaptiveQueue::wrapped_queue229,7069
    typedef std::pair<int,AdaptiveQueue::int234,7304
    typedef std::pair<int, Value> Entry;AdaptiveQueue::Entry234,7304
    AdaptiveQueue(AdaptiveQueue::AdaptiveQueue236,7346
    ~AdaptiveQueue(AdaptiveQueue::~AdaptiveQueue239,7415
    void push(AdaptiveQueue::push243,7475
    Entry pop(AdaptiveQueue::pop252,7753
    bool empty(AdaptiveQueue::empty256,7815
    void clear(AdaptiveQueue::clear260,7886
    void add_virtual_pushes(AdaptiveQueue::add_virtual_pushes264,7944

relaxation_heuristic.h,1197
#define RELAXATION_HEURISTIC_H2,31
struct UnaryOperator 15,207
    int operator_no;UnaryOperator::operator_no16,230
    std::vector<Proposition *> precondition;UnaryOperator::precondition17,302
    Proposition *effect;UnaryOperator::effect18,347
    int base_cost;UnaryOperator::base_cost19,372
    int unsatisfied_preconditions;UnaryOperator::unsatisfied_preconditions21,392
    int cost;UnaryOperator::cost22,427
    UnaryOperator(UnaryOperator::UnaryOperator24,531
struct Proposition 30,754
    bool is_goal;Proposition::is_goal31,775
    int id;Proposition::id32,793
    std::vector<UnaryOperator *> precondition_of;Proposition::precondition_of33,805
    int cost;Proposition::cost35,856
    UnaryOperator *reached_by;Proposition::reached_by36,907
    bool marked;Proposition::marked37,938
    Proposition(Proposition::Proposition39,1018
class RelaxationHeuristic 48,1165
    std::vector<UnaryOperator> unary_operators;RelaxationHeuristic::unary_operators52,1318
    std::vector<std::vector<Proposition> > propositions;RelaxationHeuristic::propositions53,1366
    std::vector<Proposition *> goal_propositions;RelaxationHeuristic::goal_propositions54,1423

rng.h,465
#define RNG_H2,14
class RandomNumberGenerator 9,106
    std::mt19937 rng;RandomNumberGenerator::rng11,185
    double operator()(RandomNumberGenerator::operator()23,587
    int operator()(RandomNumberGenerator::operator()29,769
    typename std::vector<T>::const_iterator choose(RandomNumberGenerator::choose36,963
    typename std::vector<T>::iterator choose(RandomNumberGenerator::choose41,1126
    void shuffle(RandomNumberGenerator::shuffle46,1277

root_task.h,251
#define ROOT_TASK_H2,20
class RootTask 11,126
    virtual std::pair<RootTask::std::pair22,755
    virtual std::pair<RootTask::std::pair27,1089
    virtual std::pair<RootTask::std::pair29,1236
    virtual std::pair<RootTask::std::pair36,1552

scalar_evaluator.h,62
#define SCALAR_EVALUATOR_H2,27
class ScalarEvaluator 11,146

search_engine.h,1213
#define SEARCH_ENGINE_H2,24
enum SearchStatus 16,264
enum SearchStatus {IN_PROGRESS,SearchStatus::IN_PROGRESS16,264
enum SearchStatus {IN_PROGRESS, TIMEOUT,SearchStatus::TIMEOUT16,264
enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED,SearchStatus::FAILED16,264
enum SearchStatus {IN_PROGRESS, TIMEOUT, FAILED, SOLVED}SearchStatus::SOLVED16,264
class SearchEngine 18,323
    typedef std::vector<const GlobalOperator *> Plan;SearchEngine::Plan20,352
    SearchStatus status;SearchEngine::status22,415
    bool solution_found;SearchEngine::solution_found23,440
    Plan plan;SearchEngine::plan24,465
    SearchSpace search_space;SearchEngine::search_space26,491
    SearchProgress search_progress;SearchEngine::search_progress27,521
    SearchStatistics statistics;SearchEngine::statistics28,557
    int bound;SearchEngine::bound29,590
    OperatorCost cost_type;SearchEngine::cost_type30,605
    double max_time;SearchEngine::max_time31,633
    virtual void initialize(SearchEngine::initialize33,655
    const SearchStatistics &get_statistics(SearchEngine::get_statistics48,1173
    void set_bound(SearchEngine::set_bound49,1246
    int get_bound(SearchEngine::get_bound50,1286

search_node_info.h,546
#define SEARCH_NODE_INFO_H2,27
struct SearchNodeInfo 10,229
    enum NodeStatus 11,253
    enum NodeStatus {NEW NEW11,253
    enum NodeStatus {NEW = 0, OPEN 11,253
    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED 11,253
    enum NodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END 11,253
    unsigned int status 13,321
    int g 14,350
    int h 15,366
    bool h_is_dirty 16,419
    StateID parent_state_id;17,444
    const GlobalOperator *creating_operator;creating_operator18,473
    int real_g;19,518
    SearchNodeInfo(21,535

search_progress.h,241
#define SEARCH_PROGRESS_H2,26
class SearchProgress 18,360
    std::unordered_map<SearchProgress::std::unordered_map19,383
    std::unordered_map<const Heuristic *, int> best_heuristic_values;SearchProgress::best_heuristic_values19,383

search_space.h,452
#define SEARCH_SPACE_H2,23
class SearchNode 15,228
    StateID state_id;SearchNode::state_id16,247
    SearchNodeInfo &info;SearchNode::info17,269
    OperatorCost cost_type;SearchNode::cost_type18,295
    StateID get_state_id(SearchNode::get_state_id23,430
class SearchSpace 55,1238
    PerStateInformation<SearchNodeInfo> search_node_infos;SearchSpace::search_node_infos56,1258
    OperatorCost cost_type;SearchSpace::cost_type58,1318

search_statistics.h,1798
#define SEARCH_STATISTICS_H2,28
class SearchStatistics 12,261
    int expanded_states;SearchStatistics::expanded_states14,312
    int evaluated_states;SearchStatistics::evaluated_states15,387
    int evaluations;SearchStatistics::evaluations16,454
    int generated_states;SearchStatistics::generated_states17,521
    int reopened_states;SearchStatistics::reopened_states18,626
    int dead_end_states;SearchStatistics::dead_end_states19,695
    int generated_ops;SearchStatistics::generated_ops21,721
    int lastjump_f_value;SearchStatistics::lastjump_f_value24,838
    int lastjump_expanded_states;SearchStatistics::lastjump_expanded_states25,900
    int lastjump_reopened_states;SearchStatistics::lastjump_reopened_states26,996
    int lastjump_evaluated_states;SearchStatistics::lastjump_evaluated_states27,1101
    int lastjump_generated_states;SearchStatistics::lastjump_generated_states28,1136
    void inc_expanded(SearchStatistics::inc_expanded36,1310
    void inc_evaluated_states(SearchStatistics::inc_evaluated_states37,1372
    void inc_generated(SearchStatistics::inc_generated38,1443
    void inc_reopened(SearchStatistics::inc_reopened39,1507
    void inc_generated_ops(SearchStatistics::inc_generated_ops40,1569
    void inc_evaluations(SearchStatistics::inc_evaluations41,1634
    void inc_dead_ends(SearchStatistics::inc_dead_ends42,1695
    int get_expanded(SearchStatistics::get_expanded45,1798
    int get_evaluated_states(SearchStatistics::get_evaluated_states46,1854
    int get_evaluations(SearchStatistics::get_evaluations47,1919
    int get_generated(SearchStatistics::get_generated48,1974
    int get_reopened(SearchStatistics::get_reopened49,2032
    int get_generated_ops(SearchStatistics::get_generated_ops50,2088

segmented_vector.h,133
#define SEGMENTED_VECTOR_H2,27
    typedef typename Allocator::template 51,2021
    typedef typename Allocator::template 153,5136

state_id.h,465
#define STATE_ID_H2,19
class StateID 9,182
    int value;StateID::value15,359
    explicit StateID(StateID::StateID16,374
    ~StateID(StateID::~StateID23,520
    static const StateID no_state;StateID::no_state26,544
    bool operator==(StateID::operator==28,580
    bool operator!=(StateID::operator!=32,674
    size_t hash(StateID::hash36,765
namespace std 43,880
struct hash<std::hash45,907
    size_t operator()(std::hash::operator()46,930

state_registry.h,1500
#define STATE_REGISTRY_H2,25
class StateRegistry 102,3909
    struct StateIDSemanticHash StateRegistry::StateIDSemanticHash103,3931
        const SegmentedArrayVector<PackedStateBin> &state_data_pool;StateRegistry::StateIDSemanticHash::state_data_pool104,3964
        StateIDSemanticHash(StateRegistry::StateIDSemanticHash::StateIDSemanticHash105,4033
        size_t operator()(StateRegistry::StateIDSemanticHash::operator()108,4183
    struct StateIDSemanticEqual StateRegistry::StateIDSemanticEqual113,4342
        const SegmentedArrayVector<PackedStateBin> &state_data_pool;StateRegistry::StateIDSemanticEqual::state_data_pool114,4376
        StateIDSemanticEqual(StateRegistry::StateIDSemanticEqual::StateIDSemanticEqual115,4445
        bool operator()(StateRegistry::StateIDSemanticEqual::operator()119,4597
    typedef std::unordered_set<StateID,StateRegistry::StateID132,5191
                               StateIDSemanticHash,StateRegistry::StateIDSemanticHash133,5231
                               StateIDSemanticEqual> StateIDSet;StateRegistry::StateIDSet134,5283
    SegmentedArrayVector<PackedStateBin> state_data_pool;StateRegistry::state_data_pool136,5349
    StateIDSet registered_states;StateRegistry::registered_states137,5407
    GlobalState *cached_initial_state;StateRegistry::cached_initial_state138,5441
    mutable std::set<PerStateInformationBase *> subscribers;StateRegistry::subscribers139,5480
    size_t size(StateRegistry::size167,6447

successor_generator.h,556
#define SUCCESSOR_GENERATOR_H2,30
class SuccessorGenerator 17,256
    const std::shared_ptr<AbstractTask> task;SuccessorGenerator::task18,283
    TaskProxy task_proxy;SuccessorGenerator::task_proxy19,329
    std::unique_ptr<GeneratorBase> root;SuccessorGenerator::root21,356
    typedef std::vector<FactProxy> Condition;SuccessorGenerator::Condition23,398
    std::vector<Condition> conditions;SuccessorGenerator::conditions27,555
    std::vector<Condition::const_iterator> next_condition_by_op;SuccessorGenerator::next_condition_by_op28,594

sum_evaluator.h,56
#define SUM_EVALUATOR_H2,24
class SumEvaluator 10,118

task_proxy.h,6929
#define TASK_PROXY_H2,21
class ProxyIterator 89,3089
    const ProxyCollection &collection;ProxyIterator::collection90,3111
    std::size_t pos;ProxyIterator::pos91,3150
    ProxyIterator(ProxyIterator::ProxyIterator93,3179
    typename ProxyCollection::ItemType operator*(ProxyIterator::operator*97,3328
    ProxyIterator &operator++(ProxyIterator::operator++101,3426
    bool operator==(ProxyIterator::operator==106,3504
    bool operator!=(ProxyIterator::operator!=110,3600
inline ProxyIterator<ProxyCollection> begin(116,3732
inline ProxyIterator<ProxyCollection> end(121,3900
class FactProxy 126,4051
    const AbstractTask *task;FactProxy::task127,4069
    int var_id;FactProxy::var_id128,4099
    int value;FactProxy::value129,4115
    int get_value(FactProxy::get_value136,4272
    const std::string &get_name(FactProxy::get_name140,4329
    bool operator==(FactProxy::operator==144,4429
    bool operator!=(FactProxy::operator!=149,4587
class FactsProxyIterator 155,4677
    const AbstractTask *task;FactsProxyIterator::task156,4704
    int var_id;FactsProxyIterator::var_id157,4734
    int value;FactsProxyIterator::value158,4750
    FactsProxyIterator(FactsProxyIterator::FactsProxyIterator160,4773
    FactProxy operator*(FactsProxyIterator::operator*164,4938
    FactsProxyIterator &operator++(FactsProxyIterator::operator++168,5027
    bool operator==(FactsProxyIterator::operator==180,5352
    bool operator!=(FactsProxyIterator::operator!=185,5519
class FactsProxy 196,5756
    const AbstractTask *task;FactsProxy::task197,5775
    explicit FactsProxy(FactsProxy::FactsProxy199,5813
    FactsProxyIterator begin(FactsProxy::begin203,5918
    FactsProxyIterator end(FactsProxy::end207,6012
class ConditionsProxy 213,6132
    const AbstractTask *task;ConditionsProxy::task215,6167
    using ItemType ConditionsProxy::ItemType217,6205
    explicit ConditionsProxy(ConditionsProxy::ConditionsProxy218,6237
    bool empty(ConditionsProxy::empty225,6466
class VariableProxy 231,6530
    const AbstractTask *task;VariableProxy::task232,6552
    int id;VariableProxy::id233,6582
    VariableProxy(VariableProxy::VariableProxy235,6602
    bool operator==(VariableProxy::operator==239,6720
    bool operator!=(VariableProxy::operator!=244,6850
    int get_id(VariableProxy::get_id248,6947
    const std::string &get_name(VariableProxy::get_name252,6998
    int get_domain_size(VariableProxy::get_domain_size256,7091
    FactProxy get_fact(VariableProxy::get_fact260,7183
class VariablesProxy 267,7323
    const AbstractTask *task;VariablesProxy::task268,7346
    using ItemType VariablesProxy::ItemType270,7384
    explicit VariablesProxy(VariablesProxy::VariablesProxy271,7420
    std::size_t size(VariablesProxy::size275,7533
    FactsProxy get_facts(VariablesProxy::get_facts284,7752
class PreconditionsProxy 290,7832
    int op_index;PreconditionsProxy::op_index291,7884
    bool is_axiom;PreconditionsProxy::is_axiom292,7902
    PreconditionsProxy(PreconditionsProxy::PreconditionsProxy294,7929
    std::size_t size(PreconditionsProxy::size298,8120
class EffectConditionsProxy 311,8524
    int op_index;EffectConditionsProxy::op_index312,8579
    int eff_index;EffectConditionsProxy::eff_index313,8597
    bool is_axiom;EffectConditionsProxy::is_axiom314,8616
    EffectConditionsProxy(EffectConditionsProxy::EffectConditionsProxy316,8643
    std::size_t size(EffectConditionsProxy::size321,8886
class EffectProxy 334,9305
    const AbstractTask *task;EffectProxy::task335,9325
    int op_index;EffectProxy::op_index336,9355
    int eff_index;EffectProxy::eff_index337,9373
    bool is_axiom;EffectProxy::is_axiom338,9392
    EffectProxy(EffectProxy::EffectProxy340,9419
    EffectConditionsProxy get_conditions(EffectProxy::get_conditions344,9623
    FactProxy get_fact(EffectProxy::get_fact348,9757
class EffectsProxy 356,9964
    const AbstractTask *task;EffectsProxy::task357,9985
    int op_index;EffectsProxy::op_index358,10015
    bool is_axiom;EffectsProxy::is_axiom359,10033
    using ItemType EffectsProxy::ItemType361,10060
    EffectsProxy(EffectsProxy::EffectsProxy362,10094
    std::size_t size(EffectsProxy::size366,10263
class OperatorProxy 377,10539
    const AbstractTask *task;OperatorProxy::task378,10561
    int index;OperatorProxy::index379,10591
    bool is_an_axiom;OperatorProxy::is_an_axiom380,10606
    OperatorProxy(OperatorProxy::OperatorProxy382,10636
    bool operator==(OperatorProxy::operator==386,10801
    bool operator!=(OperatorProxy::operator!=391,10973
    PreconditionsProxy get_preconditions(OperatorProxy::get_preconditions395,11070
    EffectsProxy get_effects(OperatorProxy::get_effects399,11190
    int get_cost(OperatorProxy::get_cost403,11292
    bool is_axiom(OperatorProxy::is_axiom407,11386
    const std::string &get_name(OperatorProxy::get_name411,11449
    int get_id(OperatorProxy::get_id415,11558
    const GlobalOperator *get_global_operator(OperatorProxy::get_global_operator419,11612
class OperatorsProxy 425,11741
    const AbstractTask *task;OperatorsProxy::task426,11764
    using ItemType OperatorsProxy::ItemType428,11802
    explicit OperatorsProxy(OperatorsProxy::OperatorsProxy429,11838
    std::size_t size(OperatorsProxy::size433,11951
    bool empty(OperatorsProxy::empty437,12031
class AxiomsProxy 448,12241
    const AbstractTask *task;AxiomsProxy::task449,12261
    using ItemType AxiomsProxy::ItemType451,12299
    explicit AxiomsProxy(AxiomsProxy::AxiomsProxy452,12335
    std::size_t size(AxiomsProxy::size456,12442
    bool empty(AxiomsProxy::empty460,12519
class GoalsProxy 471,12728
    explicit GoalsProxy(GoalsProxy::GoalsProxy473,12780
    std::size_t size(GoalsProxy::size477,12895
class State 492,13263
    const AbstractTask *task;State::task493,13277
    std::vector<int> values;State::values494,13307
    using ItemType State::ItemType496,13344
    State(State::State497,13376
    State(State::State504,13635
    State &operator=(State::operator=509,13760
    std::size_t size(State::size516,13920
    State get_successor(State::get_successor529,14235
class TaskProxy 547,14864
    const AbstractTask *task;TaskProxy::task548,14882
    explicit TaskProxy(TaskProxy::TaskProxy550,14920
    VariablesProxy get_variables(TaskProxy::get_variables554,15023
    OperatorsProxy get_operators(TaskProxy::get_operators558,15111
    AxiomsProxy get_axioms(TaskProxy::get_axioms562,15199
    GoalsProxy get_goals(TaskProxy::get_goals566,15278
    State get_initial_state(TaskProxy::get_initial_state570,15354
    State convert_global_state(TaskProxy::convert_global_state574,15462
inline FactProxy::FactProxy(582,15662
inline VariableProxy FactProxy::get_variable(589,15923
inline bool does_fire(593,16022

task_tools.h,92
#define TASK_TOOLS_H2,21
inline bool is_applicable(7,69
inline bool is_goal_state(15,311

timer.h,190
#define TIMER_H2,16
class Timer 6,52
    double last_start_clock;Timer::last_start_clock7,66
    double collected_time;Timer::collected_time8,95
    bool stopped;Timer::stopped9,122

tracer.h,101
#define TRACER_H2,17
class TraceBlock 7,55
    std::string block_name;TraceBlock::block_name8,74

utilities.h,773
#define UTILITIES_H2,20
#define LINUX 5,42
#define OSX 6,58
#define CYGWIN 7,72
#define WINDOWS 8,89
#define OPERATING_SYSTEM 11,134
#define OPERATING_SYSTEM 13,188
#define OPERATING_SYSTEM 15,246
#define OPERATING_SYSTEM 17,281
#define NO_RETURN 27,451
#define NO_RETURN 29,496
#define ABORT(32,548
enum ExitCode 41,797
    EXIT_PLAN_FOUND 42,813
    EXIT_CRITICAL_ERROR 43,838
    EXIT_INPUT_ERROR 44,867
    EXIT_UNSUPPORTED 45,893
    EXIT_UNSOLVABLE 47,1007
    EXIT_UNSOLVED_INCOMPLETE 49,1080
    EXIT_OUT_OF_MEMORY 50,1114
extern bool is_sorted_unique(66,1647
namespace std 74,1849
ostream &operator<<(std::operator<<76,1883
bool in_bounds(89,2150
bool in_bounds(94,2291
void unused_parameter(99,2403
void release_vector_memory(105,2482

utilities_hash.h,300
#define UTILITIES_HASH_H2,25
inline void hash_combine(14,259
size_t hash_sequence(25,640
namespace std 33,826
struct hash<std::hash35,863
    size_t operator()(std::hash::operator()36,894
template<typename TA,41,1010
struct hash<hash42,1045
    size_t operator()(hash::operator()43,1079

utilities_windows.h,91
#define UTILITIES_WINDOWS_H2,28
#define NOMINMAX6,140
#define WIN32_LEAN_AND_MEAN11,291

variable_order_finder.h,821
#define VARIABLE_ORDER_FINDER_H2,32
enum VariableOrderType 9,127
    CG_GOAL_LEVEL,10,152
    CG_GOAL_RANDOM,11,171
    GOAL_CG_LEVEL,12,191
    RANDOM,13,210
    LEVEL,14,222
    REVERSE_LEVEL15,233
class VariableOrderFinder 18,255
    const std::shared_ptr<AbstractTask> task;VariableOrderFinder::task19,283
    TaskProxy task_proxy;VariableOrderFinder::task_proxy20,329
    const VariableOrderType variable_order_type;VariableOrderFinder::variable_order_type21,355
    std::vector<int> selected_vars;VariableOrderFinder::selected_vars22,404
    std::vector<int> remaining_vars;VariableOrderFinder::remaining_vars23,440
    std::vector<bool> is_goal_variable;VariableOrderFinder::is_goal_variable24,477
    std::vector<bool> is_causal_predecessor;VariableOrderFinder::is_causal_predecessor25,517

weighted_evaluator.h,171
#define WEIGHTED_EVALUATOR_H2,29
class WeightedEvaluator 8,106
    ScalarEvaluator *evaluator;WeightedEvaluator::evaluator9,157
    int w;WeightedEvaluator::w10,189

doc.h,0
