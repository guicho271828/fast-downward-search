
alternation_open_list.cc,993
OpenList<Entry> *AlternationOpenList<Entry>::_parse(_parse12,217
AlternationOpenList<Entry>::AlternationOpenList(AlternationOpenList54,2022
AlternationOpenList<Entry>::AlternationOpenList(AlternationOpenList61,2270
AlternationOpenList<Entry>::~AlternationOpenList(~AlternationOpenList68,2558
int AlternationOpenList<Entry>::insert(insert72,2636
Entry AlternationOpenList<Entry>::remove_min(remove_min82,2947
bool AlternationOpenList<Entry>::empty(empty104,3586
void AlternationOpenList<Entry>::clear(clear109,3682
void AlternationOpenList<Entry>::evaluate(evaluate116,3847
bool AlternationOpenList<Entry>::is_dead_end(is_dead_end141,4646
bool AlternationOpenList<Entry>::dead_end_is_reliable(dead_end_is_reliable146,4747
void AlternationOpenList<Entry>::get_involved_heuristics(get_involved_heuristics151,4866
int AlternationOpenList<Entry>::boost_preferred(boost_preferred157,5084
void AlternationOpenList<Entry>::boost_last_used_list(boost_last_used_list181,6012

alternation_open_list.h,611
#define OPEN_LISTS_ALTERNATION_OPEN_LIST_H2,43
class AlternationOpenList 14,237
    std::vector<OpenList<Entry> *> open_lists;AlternationOpenList::open_lists15,290
    std::vector<int> priorities;AlternationOpenList::priorities16,337
    int size;AlternationOpenList::size18,371
    bool dead_end;AlternationOpenList::dead_end19,385
    bool dead_end_reliable;AlternationOpenList::dead_end_reliable20,404
    int boosting;AlternationOpenList::boosting23,547
    int last_used_list;AlternationOpenList::last_used_list24,565
    Evaluator *get_evaluator(AlternationOpenList::get_evaluator27,601

open_list.h,421
#define OPEN_LISTS_OPEN_LIST_H2,31
class OpenList 8,130
    bool only_preferred;OpenList::only_preferred11,221
    OpenList(OpenList::OpenList14,255
    virtual ~OpenList(OpenList::~OpenList15,333
    bool only_preferred_states(OpenList::only_preferred_states25,770
    virtual int boost_preferred(OpenList::boost_preferred31,1030
    virtual void boost_last_used_list(OpenList::boost_last_used_list32,1077

open_list_buckets.cc,679
OpenList<Entry> *BucketOpenList<Entry>::_parse(_parse21,572
BucketOpenList<Entry>::BucketOpenList(BucketOpenList39,1141
BucketOpenList<Entry>::~BucketOpenList(~BucketOpenList46,1390
int BucketOpenList<Entry>::insert(insert50,1458
Entry BucketOpenList<Entry>::remove_min(remove_min69,1937
bool BucketOpenList<Entry>::empty(empty85,2325
void BucketOpenList<Entry>::clear(clear90,2416
void BucketOpenList<Entry>::evaluate(evaluate97,2562
bool BucketOpenList<Entry>::is_dead_end(is_dead_end106,2895
bool BucketOpenList<Entry>::dead_end_is_reliable(dead_end_is_reliable111,2991
void BucketOpenList<Entry>::get_involved_heuristics(get_involved_heuristics116,3105

open_list_buckets.h,710
#define OPEN_LISTS_OPEN_LIST_BUCKETS_H2,39
class BucketOpenList 14,229
    typedef std::deque<Entry> Bucket;BucketOpenList::Bucket15,277
    std::vector<Bucket> buckets;BucketOpenList::buckets16,315
    mutable int lowest_bucket;BucketOpenList::lowest_bucket17,348
    int size;BucketOpenList::size18,379
    ScalarEvaluator *evaluator;BucketOpenList::evaluator20,394
    int last_evaluated_value;BucketOpenList::last_evaluated_value21,426
    bool last_preferred;BucketOpenList::last_preferred22,456
    bool dead_end;BucketOpenList::dead_end23,481
    bool dead_end_reliable;BucketOpenList::dead_end_reliable24,500
    ScalarEvaluator *get_evaluator(BucketOpenList::get_evaluator26,539

pareto_open_list.cc,882
OpenList<Entry> *ParetoOpenList<Entry>::_parse(_parse14,274
bool ParetoOpenList<Entry>::dominates(dominates40,1240
bool ParetoOpenList<Entry>::is_nondominated(is_nondominated53,1589
void ParetoOpenList<Entry>::remove_key(remove_key64,1960
ParetoOpenList<Entry>::ParetoOpenList(ParetoOpenList84,2905
ParetoOpenList<Entry>::ParetoOpenList(ParetoOpenList92,3271
ParetoOpenList<Entry>::~ParetoOpenList(~ParetoOpenList100,3595
int ParetoOpenList<Entry>::insert(insert104,3663
Entry ParetoOpenList<Entry>::remove_min(remove_min135,4693
void ParetoOpenList<Entry>::clear(clear163,5449
void ParetoOpenList<Entry>::evaluate(evaluate169,5559
bool ParetoOpenList<Entry>::is_dead_end(is_dead_end190,6246
bool ParetoOpenList<Entry>::dead_end_is_reliable(dead_end_is_reliable195,6342
void ParetoOpenList<Entry>::get_involved_heuristics(get_involved_heuristics200,6456

pareto_open_list.h,1283
#define OPEN_LISTS_PARETO_OPEN_LIST_H2,38
namespace __gnu_cxx 16,275
struct hash<__gnu_cxx::hash18,308
    size_t operator()(__gnu_cxx::hash::operator()20,416
class ParetoOpenList 34,786
    typedef std::deque<Entry> Bucket;ParetoOpenList::Bucket35,834
    typedef std::vector<int> KeyType;ParetoOpenList::KeyType36,872
    typedef typename __gnu_cxx::hash_map<ParetoOpenList::__gnu_cxx::hash_map38,967
                                         __gnu_cxx::hash<const std::vector<int> > > BucketMap;ParetoOpenList::BucketMap39,1031
    typedef std::set<KeyType> KeySet;ParetoOpenList::KeySet40,1126
    BucketMap buckets;ParetoOpenList::buckets42,1200
    KeySet nondominated;ParetoOpenList::nondominated43,1223
    bool state_uniform_selection;ParetoOpenList::state_uniform_selection44,1248
    std::vector<ScalarEvaluator *> evaluators;ParetoOpenList::evaluators45,1282
    std::vector<int> last_evaluated_value;ParetoOpenList::last_evaluated_value46,1329
    bool last_preferred;ParetoOpenList::last_preferred52,1573
    bool dead_end;ParetoOpenList::dead_end54,1599
    bool dead_end_reliable;ParetoOpenList::dead_end_reliable55,1618
    Evaluator *get_evaluator(ParetoOpenList::get_evaluator57,1657
    bool empty(ParetoOpenList::empty68,2026

standard_scalar_open_list.cc,884
OpenList<Entry> *StandardScalarOpenList<Entry>::_parse(_parse13,236
StandardScalarOpenList<Entry>::StandardScalarOpenList(StandardScalarOpenList35,909
StandardScalarOpenList<Entry>::StandardScalarOpenList(StandardScalarOpenList42,1131
StandardScalarOpenList<Entry>::~StandardScalarOpenList(~StandardScalarOpenList49,1326
int StandardScalarOpenList<Entry>::insert(insert53,1410
Entry StandardScalarOpenList<Entry>::remove_min(remove_min65,1710
bool StandardScalarOpenList<Entry>::empty(empty85,2206
void StandardScalarOpenList<Entry>::clear(clear90,2305
void StandardScalarOpenList<Entry>::evaluate(evaluate96,2411
bool StandardScalarOpenList<Entry>::is_dead_end(is_dead_end105,2752
bool StandardScalarOpenList<Entry>::dead_end_is_reliable(dead_end_is_reliable110,2856
void StandardScalarOpenList<Entry>::get_involved_heuristics(get_involved_heuristics115,2978

standard_scalar_open_list.h,785
#define OPEN_LISTS_STANDARD_SCALAR_OPEN_LIST_H2,47
class StandardScalarOpenList 15,265
    typedef std::deque<Entry> Bucket;StandardScalarOpenList::Bucket16,321
    std::map<StandardScalarOpenList::std::map18,360
    std::map<int, Bucket> buckets;StandardScalarOpenList::buckets18,360
    int size;StandardScalarOpenList::size19,395
    ScalarEvaluator *evaluator;StandardScalarOpenList::evaluator21,410
    int last_evaluated_value;StandardScalarOpenList::last_evaluated_value22,442
    int last_preferred;StandardScalarOpenList::last_preferred23,472
    bool dead_end;StandardScalarOpenList::dead_end24,496
    bool dead_end_reliable;StandardScalarOpenList::dead_end_reliable25,515
    ScalarEvaluator *get_evaluator(StandardScalarOpenList::get_evaluator27,554

tiebreaking_open_list.cc,975
OpenList<Entry> *TieBreakingOpenList<Entry>::_parse(_parse17,387
TieBreakingOpenList<Entry>::TieBreakingOpenList(TieBreakingOpenList35,1043
TieBreakingOpenList<Entry>::TieBreakingOpenList(TieBreakingOpenList43,1374
TieBreakingOpenList<Entry>::~TieBreakingOpenList(~TieBreakingOpenList52,1707
int TieBreakingOpenList<Entry>::insert(insert56,1785
Entry TieBreakingOpenList<Entry>::remove_min(remove_min69,2143
bool TieBreakingOpenList<Entry>::empty(empty88,2645
void TieBreakingOpenList<Entry>::clear(clear93,2741
void TieBreakingOpenList<Entry>::evaluate(evaluate99,2844
bool TieBreakingOpenList<Entry>::is_dead_end(is_dead_end122,3591
bool TieBreakingOpenList<Entry>::dead_end_is_reliable(dead_end_is_reliable127,3692
const std::vector<int> &TieBreakingOpenList<Entry>::get_value(get_value132,3811
int TieBreakingOpenList<Entry>::dimension(dimension137,3935
void TieBreakingOpenList<Entry>::get_involved_heuristics(get_involved_heuristics142,4042

tiebreaking_open_list.h,945
#define OPEN_LISTS_TIEBREAKING_OPEN_LIST_H2,43
class TieBreakingOpenList 17,288
    typedef std::deque<Entry> Bucket;TieBreakingOpenList::Bucket18,341
    std::map<TieBreakingOpenList::std::map20,380
    std::map<const std::vector<int>, Bucket> buckets;TieBreakingOpenList::buckets20,380
    int size;TieBreakingOpenList::size21,434
    std::vector<ScalarEvaluator *> evaluators;TieBreakingOpenList::evaluators23,449
    std::vector<int> last_evaluated_value;TieBreakingOpenList::last_evaluated_value24,496
    bool last_preferred;TieBreakingOpenList::last_preferred25,539
    bool dead_end;TieBreakingOpenList::dead_end26,564
    bool first_is_dead_end;TieBreakingOpenList::first_is_dead_end27,583
    bool dead_end_reliable;TieBreakingOpenList::dead_end_reliable28,611
    bool allow_unsafe_pruning;TieBreakingOpenList::allow_unsafe_pruning29,639
    Evaluator *get_evaluator(TieBreakingOpenList::get_evaluator35,849
